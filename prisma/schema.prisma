generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  ADMIN
  CLIENT
  LEGAL
  WORKER
}

enum ContactType {
  PHONE
  EMAIL
}

enum DocumentType {
  PASSPORT
  ID_CARD
  DIPLOMA
  CERTIFICATE
}

enum JobType {
  SOLO
  EMPLOYEE
  ABROAD
}

enum OrderStatus {
  NEW
  PROGRESS
  DONE
  REJECTED
}

enum TransactionStatus {
  CREATED
  PAID
  DECLINED
}

enum OfferStatus {
  NEW
  DECLINED
  ACCEPTED
}

model User {
  id         String    @id @default(uuid(4))
  name       String
  surname    String
  middleName String    @map("middle_name")
  gender     Gender    @default(MALE)
  birthday   DateTime?
  phone      String
  email      String?   @unique
  password   String
  avatar     String?
  active     Boolean   @default(false)
  balance    Int       @default(0)

  role Role @default(CLIENT)

  clientProfile Client?
  legalProfile  Legal?
  workerProfile Worker?
  adminProfile  Admin?
  transactions  Transaction[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Client {
  id       String  @id @default(uuid(4))
  address1 String?
  address2 String?
  address3 String?

  comments Comment[]

  contacts  Contact[]
  documents Document[]

  orders Order[]

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("clients")
}

model Legal {
  id       String  @id @default(uuid(4))
  name     String?
  address1 String?
  address2 String?
  address3 String?

  comments Comment[]

  contacts  Contact[]
  documents Document[]
  vacancies Vacancy[]

  orders Order[]

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("legals")
}

model Worker {
  id       String  @id @default(uuid(4))
  address1 String?
  address2 String?
  address3 String?

  contacts  Contact[]
  documents Document[]

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  professions WorkerProfession[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("workers")
}

model Admin {
  id String @id @default(uuid(4))

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("admins")
}

model ResetPasswordRequest {
  id String @id @default(uuid(4))

  phone String
  code  String

  expires_at DateTime
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("reset-password-requests")
}

model Contact {
  id      String      @id @default(uuid(4))
  contact String
  type    ContactType

  clientId String @unique @map("client_id")
  client   Client @relation(fields: [clientId], references: [id])

  legalId String @unique @map("legal_id")
  legal   Legal  @relation(fields: [legalId], references: [id])

  workerId String @unique @map("worker_id")
  worker   Worker @relation(fields: [workerId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contacts")
}

model Document {
  id     String       @id @default(uuid(4))
  fileId String
  type   DocumentType

  clientId String? @map("client_id")
  client   Client? @relation(fields: [clientId], references: [id])

  legalId String? @map("legal_id")
  legal   Legal?  @relation(fields: [legalId], references: [id])

  workerId String? @map("worker_id")
  worker   Worker? @relation(fields: [workerId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("documents")
}

model ProfessionCategory {
  id     String @id @default(uuid(4))
  nameUz String @map("name_uz")
  nameRu String @map("name_ru")

  professions Profession[]

  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("profession_categories")
}

model Profession {
  id     String @id @default(uuid(4))
  nameUz String @map("name_uz")
  nameRu String @map("name_ru")

  workerProfessions WorkerProfession[]

  categoryId String?
  category   ProfessionCategory? @relation(fields: [categoryId], references: [id])

  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("professions")
}

model WorkerProfession {
  id                  String  @id @default(uuid(4))
  minPrice            Int     @map("min_price")
  maxPrice            Int     @map("max_price")
  rating              Float   @default(0)
  hasTeam             Boolean @default(false) @map("has_team")
  teamMemberCount     Int     @default(1) @map("team_member_count")
  readyForHugeProject Boolean @default(false) @map("ready_for_huge_project")
  inventory           String?
  competitions        String?
  jobType             JobType @default(SOLO) @map("job_type")

  demos         WorkerProfessionDemo[]
  orders        Order[]
  locations     Location[]
  experience    Experience[]
  vacancyOffers Offer[]
  schedule      Schedule?

  workerId String @map("worker_id")
  worker   Worker @relation(fields: [workerId], references: [id])

  professionId String     @map("profession_id")
  profession   Profession @relation(fields: [professionId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("worker_profession")
}

model WorkerProfessionDemo {
  id      String  @id @default(uuid(4))
  fileId  String
  comment String?

  workerProfessionId String           @map("profession_id")
  workerProfession   WorkerProfession @relation(fields: [workerProfessionId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@map("worker_profession_demo")
}

model Comment {
  id       String  @id @default(uuid(4))
  text     String?
  rating   Int     @default(1)
  feedback String?

  orderId String @map("order_id")
  order   Order  @relation(fields: [orderId], references: [id])

  clientId String? @map("client_id")
  client   Client? @relation(fields: [clientId], references: [id])

  legalId String? @map("legal_id")
  legal   Legal?  @relation(fields: [legalId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@map("comments")
}

model Order {
  id          String      @id @default(uuid(4))
  startAt     DateTime?   @map("start_at")
  endAt       DateTime?   @map("end_at")
  rejectedAt  DateTime?   @map("rejected_at")
  deadline    DateTime    @map("deadline")
  description String
  status      OrderStatus @default(NEW)
  budget      Int
  address1    String
  address2    String
  address3    String

  comments Comment[]

  clientId String? @map("client_id")
  client   Client? @relation(fields: [clientId], references: [id])

  legalId String? @map("legal_id")
  legal   Legal?  @relation(fields: [legalId], references: [id])

  workerProfessionId String           @map("worker_profession_id")
  workerProfession   WorkerProfession @relation(fields: [workerProfessionId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("orders")
}

model Location {
  id        String @id @default(uuid(4))
  latitude  Float
  longitude Float
  radius    Float

  workProfessionId String
  workProfession   WorkerProfession @relation(fields: [workProfessionId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("locations")
}

model Schedule {
  id        String  @id @default(uuid(4))
  monday    Boolean
  tuesday   Boolean
  wednesday Boolean
  thursday  Boolean
  friday    Boolean
  saturday  Boolean
  sunday    Boolean

  workerProfessionId String           @unique
  workerProfession   WorkerProfession @relation(fields: [workerProfessionId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("schedules")
}

model Experience {
  id             String @id @default(uuid(4))
  startedAt      Int    @map("started_at")
  endedAt        Int?   @map("ended_at")
  jobPlace       String @map("job_place")
  jobDescription String @map("job_description")

  workerProfessionId String
  workerProfession   WorkerProfession @relation(fields: [workerProfessionId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("experience")
}

model Transaction {
  id          String            @id @default(uuid(4))
  userId      String            @map("user_id")
  user        User              @relation(fields: [userId], references: [id])
  amount      Int
  description String?
  status      TransactionStatus @default(CREATED)

  createdAt DateTime @default(now()) @map("created_at")

  @@map("transactions")
}

model Vacancy {
  id          String  @id @default(uuid(4))
  title       String
  salary      Int
  description String
  active      Boolean @default(true)

  legalId String
  legal   Legal  @relation(fields: [legalId], references: [id])

  offers Offer[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("vacancies")
}

model Offer {
  id      String      @id @default(uuid(4))
  status  OfferStatus @default(NEW)
  message String?

  vacancyId String
  vacancy   Vacancy @relation(fields: [vacancyId], references: [id])

  workerProfessionId String
  workerProfession   WorkerProfession @relation(fields: [workerProfessionId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("offers")
}
